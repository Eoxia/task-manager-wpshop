'use strict';

window.eoxiaJS = {};
window.taskManagerWpshop = {};

window.eoxiaJS.init = function() {
	window.eoxiaJS.loadScripts();
	window.eoxiaJS.initArrayForm();
};

window.eoxiaJS.loadScripts = function() {
	var key;
	for ( key in window.taskManagerWpshop ) {
		window.taskManagerWpshop[key].init();
	}
};

window.eoxiaJS.initArrayForm = function() {
	 window.eoxiaJS.arrayForm.init();
};

jQuery( document ).ready( window.eoxiaJS.init );

window.taskManagerWpshop.action = {};

window.taskManagerWpshop.action.init = function() {
	window.taskManagerWpshop.action.event();
};

window.taskManagerWpshop.action.event = function() {
	jQuery( document ).on( 'click', '.action-input:not(.no-action)', window.taskManagerWpshop.action.execInput );
	jQuery( document ).on( 'click', '.action-attribute:not(.no-action)', window.taskManagerWpshop.action.execAttribute );
	jQuery( document ).on( 'click', '.action-delete:not(.no-action)', window.taskManagerWpshop.action.execDelete );
};

window.taskManagerWpshop.action.execInput = function( event ) {
	var element = jQuery( this );
	var parentElement = element;
	var loaderElement = element;
	var listInput = undefined;
	var data = {};
	var i = 0;
	var doAction = true;
	var key = undefined;

	if ( element.data( 'loader' ) ) {
		loaderElement = element.closest( '.' + element.data( 'loader' ) );
	}

	if ( element.data( 'parent' ) ) {
		parentElement = element.closest( '.' + element.data( 'parent' ) );
	}

	/** Méthode appelée avant l'action */
	if ( element.data( 'module' ) && element.data( 'before-method' ) ) {
		doAction = false;
		doAction = window.taskManagerWpshop[element.data( 'module' )][element.data( 'before-method' )]( element );
	}

	if ( doAction ) {
		loaderElement.addClass( 'loading' );

		listInput = window.eoxiaJS.arrayForm.getInput( parentElement );
		for ( i = 0; i < listInput.length; i++ ) {
			if ( listInput[i].name ) {
				data[listInput[i].name] = listInput[i].value;
			}
		}

		element.get_data( function( attrData ) {
			for ( key in attrData ) {
				data[key] = attrData[key];
			}

			window.taskManagerWpshop.request.send( element, data );
		} );
	}
};

window.taskManagerWpshop.action.execAttribute = function( event ) {
  var element = jQuery( this );
	var doAction = true;
	var loaderElement = element;

	if ( element.data( 'loader' ) ) {
		loaderElement = element.closest( '.' + element.data( 'loader' ) );
	}

	/** Méthode appelée avant l'action */
	if ( element.data( 'module' ) && element.data( 'before-method' ) ) {
		doAction = false;
		doAction = window.taskManagerWpshop[element.data( 'module' )][element.data( 'before-method' )]( element );
	}

	if ( doAction ) {
		if ( jQuery( this ).data( 'confirm' ) ) {
			if ( window.confirm( jQuery( this ).data( 'confirm' ) ) ) {
				element.get_data( function( data ) {
					loaderElement.addClass( 'loading' );
					window.taskManagerWpshop.request.send( element, data );
				} );
			}
		} else {
			element.get_data( function( data ) {
				loaderElement.addClass( 'loading' );
				window.taskManagerWpshop.request.send( element, data );
			} );
		}
	}
};

window.taskManagerWpshop.action.execDelete = function( event ) {
  var element = jQuery( this );
	var doAction = true;
	var loaderElement = element;

	if ( element.data( 'loader' ) ) {
		loaderElement = element.closest( '.' + element.data( 'loader' ) );
	}

	/** Méthode appelée avant l'action */
	if ( element.data( 'module' ) && element.data( 'before-method' ) ) {
		doAction = false;
		doAction = window.taskManagerWpshop[element.data( 'module' )][element.data( 'before-method' )]( element );
	}

	if ( doAction ) {
		if ( window.confirm( window.digi_confirm_delete ) ) {
			element.get_data( function( data ) {
				loaderElement.addClass( 'loading' );
				window.taskManagerWpshop.request.send( element, data );
			} );
		}
	}
};

window.eoxiaJS.arrayForm = {};

window.eoxiaJS.arrayForm.init = function() {
	window.eoxiaJS.arrayForm.event();
};

window.eoxiaJS.arrayForm.event = function() {
	jQuery( document ).on( 'click', '.submit-fake-form', window.eoxiaJS.arrayForm.sendForm );
};

window.eoxiaJS.arrayForm.getInput = function( parent ) {
	return parent.find( 'input, textarea, select' );
};

window.eoxiaJS.arrayForm.getInputValue = function( input ) {
	switch ( input.getAttribute( 'type' ) ) {
		case 'checkbox':
			return input.checked;
			break;
		default:
			return input.value;
			break;
	}
};

window.eoxiaJS.arrayForm.sendForm = function( event ) {
	var element = jQuery( this );
	var parent = element.closest( '.form' );
	var listInput = window.eoxiaJS.arrayForm.getInput( parent );
	var data = {};
	var i = 0;

	event.preventDefault();

	for ( i = 0; i < listInput.length; i++ ) {
		if ( listInput[i].name ) {
			data[listInput[i].name] = window.eoxiaJS.arrayForm.getInputValue( listInput[i] );
		}
	}

	window.taskManagerWpshop.request.send( element, data );
};

jQuery.fn.get_data = function( cb ) {
	this.each( function() {
		var data = {};
		var i = 0;
		var localName = undefined;

		for ( i = 0; i <  jQuery( this )[0].attributes.length; i++ ) {
			localName = jQuery( this )[0].attributes[i].localName;
			if ( 'data' === localName.substr( 0, 4 ) || 'action' === localName ) {
				localName = localName.substr( 5 );

				if ( 'nonce' === localName ) {
					localName = '_wpnonce';
				}

				localName = localName.replace( '-', '_' );
				data[localName] =  jQuery( this )[0].attributes[i].value;
			}
		}

		cb( data );
	} );
};

window.taskManagerWpshop.date = {};

window.taskManagerWpshop.date.init = function() {
	jQuery( document ).on( 'click', '.date', function( e ) {
		jQuery( this ).datepicker( {
			dateFormat: 'dd/mm/yy'
		} );

		jQuery( this ).datepicker( 'show' );
	} );
};

window.taskManagerWpshop.form = {};

window.taskManagerWpshop.form.init = function() {
    window.taskManagerWpshop.form.event();
};
window.taskManagerWpshop.form.event = function() {
    jQuery( document ).on( 'click', '.submit-form', window.taskManagerWpshop.form.submitForm );
};

window.taskManagerWpshop.form.submitForm = function( event ) {
	var element = jQuery( this );

	element.closest( 'form' ).addClass( 'loading' );

	event.preventDefault();
	element.closest( 'form' ).ajaxSubmit( {
		success: function( response ) {
			element.closest( 'form' ).removeClass( 'loading' );

			if ( response && response.success ) {
				if ( response.data.module && response.data.callback_success ) {
					window.taskManagerWpshop[response.data.module][response.data.callback_success]( element, response );
				}
			} else {
				if ( response.data.module && response.data.callback_error ) {
					window.taskManagerWpshop[response.data.module][response.data.callback_error]( element, response );
				}
			}
		}
	} );
};

window.taskManagerWpshop.global = {};

window.taskManagerWpshop.global.init = function() {};

window.taskManagerWpshop.global.downloadFile = function( urlToFile, filename ) {
	var url = jQuery( '<a href="' + urlToFile + '" download="' + filename + '"></a>' );
	jQuery( '.wrap' ).append( url );
	url[0].click();
	url.remove();
};

window.taskManagerWpshop.global.removeDiacritics = function( input ) {
	var output = '';
	var normalized = input.normalize( 'NFD' );
	var i = 0;
	var j = 0;

	while ( i < input.length ) {
		output += normalized[j];

		j += ( input[i] == normalized[j] ) ? 1 : 2;
		i++;
	}

	return output;
};

window.taskManagerWpshop.input = {};

window.taskManagerWpshop.input.init = function() {
	window.taskManagerWpshop.input.event();
};

window.taskManagerWpshop.input.event = function() {
  jQuery( document ).on( 'keyup', '.digirisk-wrap .form-element input, .digirisk-wrap .form-element textarea', window.taskManagerWpshop.input.keyUp );
};

window.taskManagerWpshop.input.keyUp = function( event ) {
	if ( 0 < jQuery( this ).val().length ) {
		jQuery( this ).closest( '.form-element' ).addClass( 'active' );
	} else {
		jQuery( this ).closest( '.form-element' ).removeClass( 'active' );
	}
};

window.taskManagerWpshop.popup = {};

window.taskManagerWpshop.popup.init = function() {
	window.taskManagerWpshop.popup.event();
};

window.taskManagerWpshop.popup.event = function() {
	jQuery( document ).on( 'keyup', window.taskManagerWpshop.popup.keyup );
  jQuery( document ).on( 'click', '.open-popup, .open-popup i', window.taskManagerWpshop.popup.open );
  jQuery( document ).on( 'click', '.open-popup-ajax', window.taskManagerWpshop.popup.openAjax );
  jQuery( document ).on( 'click', '.popup .container, .digi-popup-propagation', window.taskManagerWpshop.popup.stop );
  jQuery( document ).on( 'click', '.popup .container .button.green', window.taskManagerWpshop.popup.confirm );
  jQuery( document ).on( 'click', '.popup .close', window.taskManagerWpshop.popup.close );
  jQuery( document ).on( 'click', 'body', window.taskManagerWpshop.popup.close );
};

window.taskManagerWpshop.popup.keyup = function( event ) {
	if ( 27 === event.keyCode ) {
		jQuery( '.popup .close' ).click();
	}
};

window.taskManagerWpshop.popup.open = function( event ) {
	var triggeredElement = jQuery( this );

	if ( triggeredElement.is( 'i' ) ) {
		triggeredElement = triggeredElement.parents( '.open-popup' );
	}

	var target = triggeredElement.closest(  '.' + triggeredElement.data( 'parent' ) ).find( '.' + triggeredElement.data( 'target' ) );
	var cbObject, cbFunc = undefined;
	target.addClass( 'active' );

	if ( target.is( ':visible' ) && triggeredElement.data( 'cb-object' ) && triggeredElement.data( 'cb-func' ) ) {
		cbObject = triggeredElement.data( 'cb-object' );
		cbFunc = triggeredElement.data( 'cb-func' );

		// On récupères les "data" sur l'élement en tant qu'args.
		triggeredElement.get_data( function( data ) {
			window.taskManagerWpshop[cbObject][cbFunc]( triggeredElement, target, event, data );
		} );
	}

  event.stopPropagation();
};

/**
 * Ouvre la popup en envoyant une requête AJAX.
 * Les paramètres de la requête doivent être configurer directement sur l'élement
 * Ex: data-action="load-workunit" data-id="190"
 *
 * @param  {[type]} event [description]
 * @return {[type]}       [description]
 */
window.taskManagerWpshop.popup.openAjax = function( event ) {
	var element = jQuery( this );
	var target = jQuery( this ).closest(  '.' + jQuery( this ).data( 'parent' ) ).find( '.' + jQuery( this ).data( 'target' ) );
	target.addClass( 'active' );

	jQuery( this ).get_data( function( data ) {
		delete data.parent;
		delete data.target;
		window.taskManagerWpshop.request.send( element, data );
	});

	event.stopPropagation();
};

window.taskManagerWpshop.popup.confirm = function( event ) {
	var triggeredElement = jQuery( this );
	var cbObject, cbFunc = undefined;

	if ( ! jQuery( '.popup' ).hasClass( 'no-close' ) ) {
		jQuery( '.popup' ).removeClass( 'active' );

		if ( triggeredElement.attr( 'data-cb-object' ) && triggeredElement.attr( 'data-cb-func' ) ) {
			cbObject = triggeredElement.attr( 'data-cb-object' );
			cbFunc = triggeredElement.attr( 'data-cb-func' );

			// On récupères les "data" sur l'élement en tant qu'args.
			triggeredElement.get_data( function( data ) {
				window.taskManagerWpshop[cbObject][cbFunc]( triggeredElement, event, data );
			} );
		}
	}
};

window.taskManagerWpshop.popup.stop = function( event ) {
	event.stopPropagation();
};

window.taskManagerWpshop.popup.close = function( event ) {
	jQuery( '.popup:not(.no-close)' ).removeClass( 'active' );
	jQuery( '.digi-popup:not(.no-close)' ).removeClass( 'active' );
};

var regex = {
	validateEmail: function( email ) {
	    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
	    return re.test( email );
	},

	validateEndEmail: function( endEmail ) {
		var re = /^[a-zA-Z0-9]+\.[a-zA-Z0-9]+(\.[a-z-A-Z0-9]+)?$/;
		return re.test( endEmail );
	}
};

window.taskManagerWpshop.render = {};

window.taskManagerWpshop.render.init = function() {
	window.taskManagerWpshop.render.event();
};

window.taskManagerWpshop.render.event = function() {};

window.taskManagerWpshop.render.callRenderChanged = function() {
	var key = undefined;

	for ( key in window.taskManagerWpshop ) {
		if ( window.taskManagerWpshop[key].renderChanged ) {
			window.taskManagerWpshop[key].renderChanged();
		}
	}
};

window.taskManagerWpshop.request = {};

window.taskManagerWpshop.request.init = function() {};

window.taskManagerWpshop.request.send = function( element, data ) {
	jQuery.post( window.ajaxurl, data, function( response ) {
		element.closest( '.loading' ).removeClass( 'loading' );

		if ( response && response.success ) {
			if ( response.data.module && response.data.callback_success ) {
				window.taskManagerWpshop[response.data.module][response.data.callback_success]( element, response );
			}
		} else {
			if ( response.data.module && response.data.callback_error ) {
				window.taskManagerWpshop[response.data.module][response.data.callback_error]( element, response );
			}
		}
	}, 'json' );
};

window.taskManagerWpshop.request.get = function( url, data ) {
	jQuery.get( url, data, function( response ) {
		if ( response && response.success ) {
			if ( response.data.module && response.data.callback_success ) {
				window.taskManagerWpshop[response.data.module][response.data.callback_success]( response );
			}
		} else {
			if ( response.data.module && response.data.callback_error ) {
				window.taskManagerWpshop[response.data.module][response.data.callback_error]( response );
			}
		}
	}, 'json' );
};

window.taskManagerWpshop.tab = {};

window.taskManagerWpshop.tab.init = function() {
	window.taskManagerWpshop.tab.event();
};

window.taskManagerWpshop.tab.event = function() {
  jQuery( document ).on( 'click', '.tab-element', window.taskManagerWpshop.tab.load );
};

window.taskManagerWpshop.tab.load = function( event ) {
	var tabTriggered = jQuery( this );
	var data = {};

  event.preventDefault();
	event.stopPropagation();

	tabTriggered.closest( '.content' ).removeClass( 'active' );

	if ( ! tabTriggered.hasClass( 'no-tab' ) && tabTriggered.data( 'action' ) ) {
		jQuery( '.tab .tab-element.active' ).removeClass( 'active' );
		tabTriggered.addClass( 'active' );

		data = {
			action: 'load_tab_content',
			_wpnonce: tabTriggered.data( 'nonce' ),
			tab_to_display: tabTriggered.data( 'action' ),
			title: tabTriggered.data( 'title' ),
			element_id: tabTriggered.data( 'id' )
	  };

		jQuery( '.' + tabTriggered.data( 'target' ) ).addClass( 'loading' );

		jQuery.post( window.ajaxurl, data, function( response ) {
			jQuery( '.' + tabTriggered.data( 'target' ) ).replaceWith( response.data.template );

			window.taskManagerWpshop.tab.callTabChanged();
		} );

	}

};

window.taskManagerWpshop.tab.callTabChanged = function() {
	var key = undefined;
	for ( key in window.taskManagerWpshop ) {
		if ( window.taskManagerWpshop[key].tabChanged ) {
			window.taskManagerWpshop[key].tabChanged();
		}
	}
};

window.taskManagerWpshop.toggle = {};

window.taskManagerWpshop.toggle.init = function() {
	window.taskManagerWpshop.toggle.event();
};

window.taskManagerWpshop.toggle.event = function() {
  jQuery( document ).on( 'click', '.toggle:not(.disabled), .toggle:not(.disabled) i', window.taskManagerWpshop.toggle.open );
  jQuery( document ).on( 'click', 'body', window.taskManagerWpshop.toggle.close );
};

window.taskManagerWpshop.toggle.open = function( event ) {
	var target = undefined;
	var elementToggle = jQuery( this );

	if ( elementToggle.is( 'i' ) ) {
		elementToggle = elementToggle.parents( '.toggle' );
	}

	jQuery( '.toggle .content.active' ).removeClass( 'active' );

	if ( elementToggle.data( 'parent' ) ) {
		target = elementToggle.closest( '.' + elementToggle.data( 'parent' ) ).find( '.' + elementToggle.data( 'target' ) );
	} else {
		target = jQuery( '.' + elementToggle.data( 'target' ) );
	}

	if ( target ) {
	  target.toggleClass( 'active' );
	  event.stopPropagation();
	}
};

window.taskManagerWpshop.toggle.close = function( event ) {
	jQuery( '.toggle .content' ).removeClass( 'active' );
	event.stopPropagation();
};

window.taskManagerWpshop.frontendSupport = {};

window.taskManagerWpshop.frontendSupport.init = function() {
	window.taskManagerWpshop.frontendSupport.event();
};

window.taskManagerWpshop.frontendSupport.event = function() {
	jQuery( document ).on( 'click', '.wpeo-ask-task', window.taskManagerWpshop.frontendSupport.slideAskTask );
	jQuery( document ).on( 'keyup', '.wps-section-content .task-search', window.taskManagerWpshop.frontendSupport.searchKey );
	jQuery( document ).on( 'click', '.wps-section-content .search-button', window.taskManagerWpshop.frontendSupport.searchIn );

	jQuery( document ).on( 'click', '.wpeo-task-point-use-toggle', window.taskManagerWpshop.frontendSupport.togglePoint );
	jQuery( document ).on( 'click', '.point-content', window.taskManagerWpshop.frontendSupport.setPointActive );
};

window.taskManagerWpshop.frontendSupport.slideAskTask = function( event ) {
	event.preventDefault();
	jQuery( '#wpeo-window-ask-task' ).slideToggle();
};

window.taskManagerWpshop.frontendSupport.searchKey = function( event ) {
	if ( 13 === event.keyCode ) {
		jQuery( '.wps-section-content .search-button' ).click();
	}
};

window.taskManagerWpshop.frontendSupport.searchIn = function( event ) {
	var element = jQuery( this );
	if ( 0 == jQuery( this ).closest( '.wps-section-content' ).find( '.task-search' ).val().length ) {
		jQuery( '.grid-item .task' ).show();
	} else {
		jQuery( '.grid-item .task:visible' ).each( function() {
			var synthesis_task = '';
			synthesis_task += jQuery( this ).text();
			jQuery( this ).find( 'input' ).each( function() {
				synthesis_task += jQuery( this ).val() + ' ';
			} );
			synthesis_task = synthesis_task.replace( /\s+\s/g, ' ' ).trim();

			if ( synthesis_task.search( new RegExp( jQuery( element ).closest( '.wps-section-content' ).find( '.task-search' ).val(), 'i' ) ) == -1 ) {
				jQuery( this ).hide();
			}
		} );
	}
};

window.taskManagerWpshop.frontendSupport.togglePoint = function( event ) {
	event.preventDefault();
	jQuery( this ).find( '.wpeo-point-toggle-arrow' ).toggleClass( 'dashicons-plus dashicons-minus' );
	jQuery( this ).closest( '.wpeo-task-point-use-toggle' ).next( '.completed-point' ).toggleClass( 'hidden' );
};

window.taskManagerWpshop.frontendSupport.setPointActive = function( event ) {
	jQuery( '.point-content.active' ).removeClass( 'active' );
	jQuery( this ).addClass( 'active' );
};

/**
 * Avant de charger les commentaires, change la dashicons.
 *
 * @param  {HTMLSpanElement} triggeredElement L'élément HTML déclenchant l'action.
 * @return void
 *
 * @since 1.3.6.0
 * @version 1.3.6.0
 */
window.taskManagerWpshop.frontendSupport.beforeLoadComments = function( triggeredElement ) {
	triggeredElement.toggleClass( 'dashicons-arrow-right-alt2 dashicons-arrow-down-alt2' );
	triggeredElement.closest( '.point' ).find( '.comments' ).toggleClass( 'hidden' );
	return true;
};

window.taskManagerWpshop.frontendSupport.loadedFrontComments = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.point' ).find( '.comments' ).html( response.data.view );
};

window.taskManagerWpshop.frontendSupport.addedCommentSuccess = function( triggeredElement, response ) {
	jQuery( triggeredElement ).closest( '.comments .comment.edit' ).after( response.data.view );
};

window.taskManagerWpshop.frontendSupport.askedTask = function( triggeredElement, response ) {
	if ( response.data.edit ) {
		jQuery( '.task[data-id="' + response.data.task_id + '"]' ).replaceWith( response.data.template );
	} else {
		jQuery( '.grid-item' ).prepend( response.data.template );
	}
};
